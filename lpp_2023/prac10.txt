/*
-----------------------
Ejercicio 1
-----------------------
*/

/*
1a) Función recursiva maxOpt(_ x: Int?, _ y: Int?) -> Int?
*/

func maxOpt(_ x: Int?, _ y: Int?) -> Int? {
    if let num1 = x, let num2 = y {
        return max(num1, num2)
    } else if let num1 = x {
        return num1
    } else if let num2 = y {
        return num2
    } else {
        return nil
    }
}

print("\n******\n1a) Función maxOpt\n******")
print("maxOpt(nil, nil)")
let res1 = maxOpt(nil, nil)
print("res1 = \(String(describing: res1))")
print("maxOpt(10, nil)")
let res2 = maxOpt(10, nil)
print("res2 = \(String(describing: res2))")
print("maxOpt(-10, 30)")
let res3 = maxOpt(-10, 30)
print("res3 = \(String(describing: res3))")


/*
1b1) Función recursiva parejaMayorParImpar2(numeros: [Int]) -> (Int?, Int?)
*/


func mayorParImpar2(numero: Int, pareja: (Int?, Int?)) -> (Int?, Int?) {
    if (numero.isMultiple(of: 2)) {
        return (pareja.0, maxOpt(pareja.1, numero))
    } else {
        return (maxOpt(pareja.0, numero), pareja.1)
    }
}

func parejaMayorParImpar2(numeros:[Int]) -> (Int?, Int?) {
    if (numeros.isEmpty) {
        return (nil, nil)
    } else {
        let primero = numeros[0]
        let resto = Array(numeros.dropFirst())
        let parejaResto = parejaMayorParImpar2(numeros: resto)
        return mayorParImpar2(numero: primero, pareja: parejaResto)
    }
}


let numeros = [-10, 201, 12, 100, 203, 2]
print("\n******\n1b1) Función parejaMayorParImpar2(numeros: \(numeros))\n******")
print(parejaMayorParImpar2(numeros: numeros))

/*
1b2) Función sumaMaxParesImpares(numeros: [Int]) -> Int
*/


func sumaMaxParesImpares(numeros: [Int]) -> Int {
    let pareja = parejaMayorParImpar2(numeros: numeros)
    return (pareja.0 ?? 0) + (pareja.1 ?? 0)
}


print("\n******\n1b2) Función sumaMaxParesImpares(numeros: \(numeros))\n******")
print(sumaMaxParesImpares(numeros: numeros))
print("Ejemplo sin ningún número par:  [11, -7, 23, 101]")
print(sumaMaxParesImpares(numeros: [11, -7, 23, 101]))
print("Ejemplo sin ningún número impar: [12, -8, 22, 100]")
print(sumaMaxParesImpares(numeros: [12, -8, 22, 100]))
print("Ejemplo con array vacío")
print(sumaMaxParesImpares(numeros: []))

/*
1b3)
*/

func mayorParImparOpt(numero: Int, parejaOpt: (Int?, Int?)?) -> (Int?, Int?)? {
  if let pareja = parejaOpt {
    if (numero.isMultiple(of: 2)) {
        return (pareja.0, maxOpt(pareja.1, numero))
    } else {
        return (maxOpt(pareja.0, numero), pareja.1)
    }
  } else { // parejaOpt es nil 
      if (numero.isMultiple(of: 2)) {
        return (nil, numero)
      } else {
        return (numero, nil)
      }
  }
}

func parejaMayorParImparOpt(numeros:[Int]) -> (Int?, Int?)? {
    if (numeros.isEmpty) {
        return nil
    } else {
        let primero = numeros[0]
        let resto = Array(numeros.dropFirst())
        let parejaResto = parejaMayorParImparOpt(numeros: resto)
        return mayorParImparOpt(numero: primero, parejaOpt: parejaResto)
    }
}

func sumaMaxParesImpares2(numeros: [Int]) -> Int {
    if let pareja = parejaMayorParImparOpt(numeros: numeros) {  
      return (pareja.0 ?? 0) + (pareja.1 ?? 0)
    } else {
      return 0
    }
}


print("\n******\n1b3) Función sumaMaxParesImpares2(numeros: \(numeros))\n******")
print(sumaMaxParesImpares2(numeros: numeros))
print("Ejemplo sin ningún número par: [11, -7, 23, 101]")
print(sumaMaxParesImpares2(numeros: [11, -7, 23, 101]))
print("Ejemplo sin ningún número impar: [12, -8, 22, 100]")
print(sumaMaxParesImpares2(numeros: [12, -8, 22, 100]))
print("Ejemplo con array vacío")
print(sumaMaxParesImpares2(numeros: []))

/*
-----------------------
Ejercicio 2: Cuestiones
-----------------------
*/

print("Ejercicio 2")
print("===========")
print("--- Apartado a")

let nums = [1,2,3,4,5,6,7,8,9,10]
let resultado1 = nums.filter{$0 % 3 == 0}.count
print("""
  a.1) Solución: \(
    resultado1
  )\n
  """)
// Devuelve la cantidad de números divisibles por 3: 3

let nums2 = [1,2,3,4,5,6,7,8,9,10]
let resultado2 = nums2.map{$0 + 100}.filter{$0 % 5 == 0}.reduce(0, +)
print("""
  a.2) Solución: \(
    resultado2
  )\n
  """)
// Devuelve la suma de todos los números incrementados en 100 múltiplos de 5: 215

let cadenas = ["En", "un", "lugar", "de", "La", "Mancha"]
let resultado3 = cadenas.sorted{$0.count < $1.count}.map{$0.count}
print("""
  a.3) Solución: \(
    resultado3
  )\n
  """)
// Devuelve la longitud de cada cadena del array ordenado de menor a mayor por
// la longitud de las cadenas: [2, 2, 2, 2, 5, 6]

let cadenas2 = ["En", "un", "lugar", "de", "La", "Mancha"]
let resultado4 = cadenas2.reduce([]) {
      (res: [(String, Int)], c: String) -> [(String, Int)] in
        res + [(c, c.count)]}.sorted(by: {$0.1 < $1.1})
print("""
  a.3) Solución: \(
    resultado4
  )\n
  """)
// Devuelve un array de tuplas con cada cadena y su longigud, ordenado
// de menor a mayor por la longitud (segundo elemento de la tupla):
// [("En", 2), ("un", 2), ("de", 2), ("La", 2), ("lugar", 5), ("Mancha", 6)]

print("--- Apartado b")

func f(nums: [Int], n: Int) -> Int {
    return nums.filter{$0 == n}.count
}

// Explicación de funcionamiento:
// Dado un array de enteros y un número, devuelve el 
// número de veces que se repite el número en el array

// Ejemplo:
print("""
  b.1) Solución: Cuenta cuantos hay igual a n en un array de enteros.
    f(nums: [1, 2, 3, 2, 4, 5, 2, 2], n: 2) = \(
    f(nums: [1, 2, 3, 2, 4, 5, 2, 2], n: 2) )\n
  """)


func g(nums: [Int]) -> [Int] {
    return nums.reduce([], {(res: [Int], n: Int) -> [Int] in
                        if !res.contains(n) {
                            return res + [n]
                        } else {
                            return res
                        }
                    })
}

// Explicación de funcionamiento:
// Elimina duplicados de un array

// Ejemplo:

print("""
  b.2) Solución: Elimina de un Array de enteros los valores repetidos.
    g(nums: [1, 2, 3, 2, 4, 3, 2, 2]) = \(
    g(nums: [1, 2, 3, 2, 4, 3, 2, 2]) )\n
  """)

func h(nums: [Int], n: Int) -> ([Int], [Int]) {
   return nums.reduce(([],[]), {(res: ([Int],[Int]), num: Int ) -> ([Int],[Int]) in
                            if (num >= n) {
                                return (res.0, res.1 + [num])
                            } else {
                                return ((res.0 + [num], res.1))
                            }
                        })
}

// Explicación de funcionamiento:
// Divide un array de enteros en dos partes: números menores que n 
// y mayores o iguales que n

let numeros2 = [102, 23, 56, 231, 12, 452]
let pivote = 100
let dosArrays = h(nums: numeros2, n: pivote)

print("""
  b.3) Solución: Devuelve una pareja indicando cuantos elementos de un array de enteros
                 (nums) son menores y cuantos mayores o iguales que un valor dado (n).
    h(nums: [1, 2, 3, 4, 5], n: 3) = \(
    h(nums: [1, 2, 3, 4, 5], n: 3) )\n
  """)

print("Apartado c")

func suma(palabras: [String], contienen: Character) -> Int {
  return palabras.filter() {$0.contains(contienen)}.reduce(0) {$0 + $1.count}
}
print("""
  c.1)
    suma(palabras: \(cadenas), contienen: "a") = \(
    suma(palabras:   cadenas , contienen: "a") )\n
  """)


// c.2)
func sumaMenoresMayores(nums: [Int], pivote: Int) -> (Int, Int) {
  return nums.reduce((0,0)) {($1 < pivote) ? ($0.0+$1, $0.1) : ($0.0, $0.1+$1)}
}
print("""
  c.2)
    sumaMenoresMayores(nums: \(nums), pivote: 8) = \(
    sumaMenoresMayores(nums:   nums , pivote: 8) )\n
  """)


print("--- Apartado d")

print("""
    La función foo() crea una clausura de un parámetro que 
    captura la variable x de su ámbito, inicializada al valor 3.
    En el cuerpo de la clausura vemos que el valor de esta variable capturada 
    se incrementa con el valor del parámetro de la clausura ($0) + 2.
    Si queremos que en la primera invocación devuelva 9, debemos
    pasar como parámetro el valor 4 (3 + 4 + 2 = 9). Al invocar por segunda
    vez a bar, se invoca otra vez a la clausura, dando como resultado 15
    (9 + 4 + 2).
  """)

func bar(f: (Int) -> Int) {
  print(f(4))
}

func foo() -> (Int) -> Int {
  var x = 3
  return {
    x += $0 + 2
    return x
  }
}

var x = 5
let g = foo()
bar(f: g)   // => 9
bar(f: g)   // => 15

/*
---------------------------
Ejercicio 3: Arbol Genérico
---------------------------
*/

indirect enum Arbol<T> {
   case nodo(T, [Arbol])
}


let arbolInt: Arbol = .nodo(53, [
                        .nodo(13, []),
                        .nodo(32, []),
                        .nodo(41, [
                          .nodo(36, []),
                          .nodo(39, [])
                          ])
                        ])

let arbolString: Arbol = .nodo("Zamora", [
                           .nodo("Buendía", [
                             .nodo("Albeza", []),
                             .nodo("Berenguer", []),
                             .nodo("Bolardo", [])
                             ]),
                           .nodo("Galván", [])
                           ])

/* Versión recursión mutua */

func toArray<T>(arbol: Arbol<T>) -> [T] {
    switch arbol {
        case let .nodo(dato, hijos):
            return [dato] + toArray(bosque: hijos)
    }
}

func toArray<T>(bosque: [Arbol<T>]) -> [T] {
    if let primero = bosque.first {
        let resto = Array(bosque.dropFirst())
        return toArray(arbol: primero) + toArray(bosque: resto)
    } else {
        return []
    }
}

print("Ejercicio 3")
print("===========")
print("-- Recursión mutua:")
print(toArray(arbol: arbolInt))
print(toArray(arbol: arbolString))

/* Versión FOS */

func toArrayFOS<T>(arbol: Arbol<T>) -> [T] {
    switch arbol {
        case let .nodo(dato, hijos):
            return hijos.map(toArrayFOS).reduce([dato], +)
    }
}

print("-- FOS:")
print(toArrayFOS(arbol: arbolInt))
print(toArrayFOS(arbol: arbolString))


/*
-----------------------------
Ejercicio 4: Listado de notas
-----------------------------
*/

import Foundation

// Para hacer más legible las condiciones definimos
// el typealias en donde damos nombre a cada uno de 
// los componentes de la tupla
typealias Calificacion = (nombre: String, 
                          parcial1: Double,
                          parcial2: Double,
                          parcial3: Double,
                          años: Int)

// Función auxiliar que calcula la nota final
func notaFinal(_ calificacion: Calificacion) -> Double {
  return calificacion.parcial1 * 0.35 + 
         calificacion.parcial2 * 0.3 + 
         calificacion.parcial3 * 0.35
}

func imprimirListadoAlumnos(_ alumnos: [Calificacion]) {
    print("Alumno   Parcial1   Parcial2   Parcial3  Años")
    for alu in alumnos {
        alu.0.withCString {
            print(String(format:"%-10s %5.2f      %5.2f    %5.2f  %3d", $0, 
                        alu.parcial1, alu.parcial2, alu.parcial3, alu.años))
        }
    }
}

func imprimirListadosNotas(_ alumnos: [Calificacion]) {
    var alumnosOrdenados: [Calificacion]

    print("LISTADO ORIGINAL")
    imprimirListadoAlumnos(alumnos)

    print("LISTADO ORDENADO por Nombre")
    alumnosOrdenados = alumnos.sorted(by: 
                 {a1, a2 in a1.nombre < a2.nombre})
    imprimirListadoAlumnos(alumnosOrdenados)

    print("LISTADO ORDENADO por Parcial1 (decreciente)")
    alumnosOrdenados = alumnos.sorted(by: 
                 {a1, a2 in a1.parcial1 > a2.parcial1})
    imprimirListadoAlumnos(alumnosOrdenados)

    print("LISTADO ORDENADO por Parcial2 (creciente)")
    alumnosOrdenados = alumnos.sorted(by: {$0.parcial2 < $1.parcial2})
    imprimirListadoAlumnos(alumnosOrdenados)

    print("LISTADO ORDENADO por Año de Matriculación y Parcial3 (decreciente año y nota)")
    alumnosOrdenados = alumnos.sorted(by: 
                  {a1, a2 in
                   if a1.años == a2.años {
                     return a1.parcial3 < a2.parcial3
                   } else {
                     return a1.años > a2.años
                   }})
    imprimirListadoAlumnos(alumnosOrdenados)

    print("LISTADO ORDENADO por Nota final (decreciente)")
    alumnosOrdenados = alumnos.sorted(by: 
                  {a1, a2 in
                   let notaAlumno1 = notaFinal(a1)
                   let notaAlumno2 = notaFinal(a2)
                   return notaAlumno1 > notaAlumno2 })
    imprimirListadoAlumnos(alumnosOrdenados)
}

// DEMOSTRACIÓN

print("Ejercicio 4")
print("===========")
let listaAlumnos: [Calificacion] = [
                    ("Pepe", 8.45, 3.75, 6.05, 1), 
                    ("Maria", 9.1, 7.5, 8.18, 1), 
                    ("Jose", 8.0, 6.65, 7.96, 1),
                    ("Carmen", 6.25, 1.2, 5.41, 2), 
                    ("Felipe", 5.65, 0.25, 3.16, 3), 
                    ("Carla", 6.25, 1.25, 4.23, 2), 
                    ("Luis", 6.75, 0.25, 4.63, 2), 
                    ("Loli", 3.0, 1.25, 2.19, 3)]
imprimirListadosNotas(listaAlumnos)

imprimirListadosNotas(listaAlumnos)

/*
------------------------------------
Ejercicio 5: Expresiones de clausura
------------------------------------
*/


print("\nEjercicio 5")
print("===========\n")


// A) Número de alumnos que han aprobado primer parcial y suspendido el segundo
print(listaAlumnos.filter { $0.parcial1 >= 5 && $0.parcial2 < 5}.count)

// B) Alumnos que han aprobado la asignatura
print(listaAlumnos
        .filter {notaFinal($0) >= 5}
        .map {$0.nombre})

// C) Nota media de todos los alumnos: tupla (media_p1, media_p2, media_cuest)
var tupla = listaAlumnos.reduce((0,0,0), {(result, alumno) in 
                                         return (result.0 + alumno.parcial1, 
                                                 result.1 + alumno.parcial2, 
                                                 result.2 + alumno.parcial3)
})
tupla = (tupla.0 / Double(listaAlumnos.count), tupla.1 / Double(listaAlumnos.count), tupla.2 / Double(listaAlumnos.count))
print(tupla)ç